import os
import json
import openpyxl
import pytz
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler

from broadcast_handler import init_broadcast, do_scheduled_broadcast, restore_scheduled_jobs
from scenario_handler import init_scenarios

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", 0))

bot = __import__("telebot").TeleBot(BOT_TOKEN)
scheduler = BackgroundScheduler()
scheduler.start()

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
FILE_LIST = {
    "scenario_store.json": {},
    "user_db.json": [],
    "broadcasts.json": {},
    "scheduled_broadcasts.json": [],
    "temp_broadcasts.json": {}
}
for filename, default in FILE_LIST.items():
    if not os.path.exists(filename):
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(default, f, ensure_ascii=False)

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_activity(user):
    try:
        with open("user_db.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except Exception:
        users = []
    found = False
    for u in users:
        if u["id"] == user.id:
            u["last_active"] = datetime.utcnow().isoformat()
            found = True
            break
    if not found:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å username (–∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–∏–∫—É)
        new_user = {
            "id": user.id,
            "first_name": getattr(user, "first_name", ""),
            "username": getattr(user, "username", ""),
            "phone": "",
            "last_active": datetime.utcnow().isoformat()
        }
        users.append(new_user)
    with open("user_db.json", "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False)

# /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(commands=["start"])
def handle_start(message):
    update_user_activity(message.from_user)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç.")

# /ping ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
@bot.message_handler(commands=["ping"])
def handle_ping(message):
    update_user_activity(message.from_user)
    bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# /–∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Äì –≤—ã–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel
@bot.message_handler(commands=["–∫–æ–Ω—Ç–∞–∫—Ç—ã"])
def handle_contacts(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        with open("user_db.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except:
        users = []
    if not users:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Contacts"
    ws.append(["ID", "–ò–º—è", "Username", "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"])
    for u in users:
        ws.append([u["id"], u.get("first_name", ""), u.get("username", ""), u.get("last_active", "")])
    wb.save("contacts.xlsx")
    with open("contacts.xlsx", "rb") as doc:
        bot.send_document(message.chat.id, doc, caption="üìã –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# /–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äì –≤—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∏ —á–∏—Å–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–∑–∞ 7 –¥–Ω–µ–π)
@bot.message_handler(commands=["–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def handle_users(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        with open("user_db.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except:
        users = []
    total = len(users)
    active = 0
    now = datetime.utcnow()
    for u in users:
        if "last_active" in u:
            try:
                last = datetime.fromisoformat(u["last_active"])
                if (now - last).days < 7:
                    active += 1
            except:
                pass
    bot.send_message(message.chat.id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö (–∑–∞ 7 –¥–Ω–µ–π): {active}")

# /—Å–∫–∞—á–∞—Ç—å_—Å—Ü–µ–Ω–∞—Ä–∏–∏ ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (JSON)
@bot.message_handler(commands=["—Å–∫–∞—á–∞—Ç—å_—Å—Ü–µ–Ω–∞—Ä–∏–∏"])
def download_scenarios(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        with open("scenario_store.json", "rb") as f:
            bot.send_document(message.chat.id, f, caption="–°—Ü–µ–Ω–∞—Ä–∏–∏")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")

# /—Å–∫–∞—á–∞—Ç—å_—Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ (JSON) —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç–∞–≤–∫–µ
@bot.message_handler(commands=["—Å–∫–∞—á–∞—Ç—å_—Ä–∞—Å—Å—ã–ª–∫–∏"])
def download_broadcasts(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        with open("broadcasts.json", "rb") as f:
            bot.send_document(message.chat.id, f, caption="–†–∞—Å—Å—ã–ª–∫–∏")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def send_weekly_statistics():
    try:
        with open("user_db.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except:
        users = []
    total = len(users)
    now = datetime.utcnow()
    new_users = sum(1 for u in users if "last_active" in u and (now - datetime.fromisoformat(u["last_active"])).days < 7)
    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users}\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}"
    bot.send_message(ADMIN_ID, stats_text)

# –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 09:00 UTC)
scheduler.add_job(send_weekly_statistics, 'cron', day_of_week='mon', hour=9, minute=0)

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
restore_scheduled_jobs(scheduler, bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
init_broadcast(bot, ADMIN_ID, scheduler)
init_scenarios(bot, ADMIN_ID)

bot.polling(none_stop=True)

