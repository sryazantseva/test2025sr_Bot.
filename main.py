# main.py
# Telegram –±–æ—Ç: —Ä–∞—Å—Å—ã–ª–∫–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏, –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, —ç–∫—Å–ø–æ—Ä—Ç, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3
import pytz
import datetime
import os
import pandas as pd
import re

TOKEN = 'YOUR_TOKEN_HERE'
TZ = pytz.timezone("Europe/Moscow")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
scheduler = AsyncIOScheduler(timezone=TZ)
scheduler.start()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class BroadcastState(StatesGroup):
    waiting_for_media = State()
    waiting_for_caption = State()
    waiting_for_time = State()

class ScenarioState(StatesGroup):
    collecting = State()
    confirming = State()

# --- DB Init ---
conn = sqlite3.connect("bot.db")
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users
             (user_id INTEGER PRIMARY KEY, first_name TEXT, username TEXT, phone TEXT, created_at TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS broadcasts
             (id INTEGER PRIMARY KEY AUTOINCREMENT, media_type TEXT, file_id TEXT, caption TEXT, time TEXT, status TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS scenarios
             (id INTEGER PRIMARY KEY AUTOINCREMENT, creator_id INTEGER, steps TEXT, created_at TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS scenario_access
             (user_id INTEGER, scenario_id INTEGER, UNIQUE(user_id, scenario_id))''')
conn.commit()

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è ---
@dp.message_handler(commands=['—Å—Ü–µ–Ω–∞—Ä–∏–π_—Å–æ–∑–¥–∞—Ç—å'])
async def create_scenario(message: types.Message, state: FSMContext):
    await state.update_data(steps=[])
    await message.answer("–í–≤–æ–¥–∏—Ç–µ —à–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ –æ–¥–Ω–æ–º—É. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî /—Å—Ü–µ–Ω–∞—Ä–∏–π_—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /–æ—Ç–º–µ–Ω–∞. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ‚Äî /—Å—Ü–µ–Ω–∞—Ä–∏–π_–ø—Ä–æ—Å–º–æ—Ç—Ä")
    await ScenarioState.collecting.set()

@dp.message_handler(commands=['—Å—Ü–µ–Ω–∞—Ä–∏–π_–ø—Ä–æ—Å–º–æ—Ç—Ä'], state=ScenarioState.collecting)
async def preview_scenario(message: types.Message, state: FSMContext):
    data = await state.get_data()
    steps = data.get("steps", [])
    if not steps:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —à–∞–≥–æ–≤.")
        return
    text = "\n".join([f"{i+1}. {s}" for i, s in enumerate(steps)])
    kb = InlineKeyboardMarkup(row_width=2)
    for i in range(len(steps)):
        kb.insert(InlineKeyboardButton(f"‚ùå {i+1}", callback_data=f"delete_step_{i}"))
    kb.add(InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="clear_steps"))
    await message.answer(f"–í–∞—à–∏ —à–∞–≥–∏:\n{text}", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("delete_step_"), state=ScenarioState.collecting)
async def delete_step(call: types.CallbackQuery, state: FSMContext):
    index = int(call.data.split("_")[-1])
    data = await state.get_data()
    steps = data.get("steps", [])
    if 0 <= index < len(steps):
        steps.pop(index)
        await state.update_data(steps=steps)
    await call.message.delete()
    await preview_scenario(call.message, state)

@dp.callback_query_handler(lambda c: c.data == "clear_steps", state=ScenarioState.collecting)
async def clear_steps(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(steps=[])
    await call.message.edit_text("–í—Å–µ —à–∞–≥–∏ —É–¥–∞–ª–µ–Ω—ã.")

@dp.message_handler(commands=['–æ—Ç–º–µ–Ω–∞'], state=ScenarioState.collecting)
async def cancel_scenario(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.message_handler(commands=['—Å—Ü–µ–Ω–∞—Ä–∏–π_—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å'], state=ScenarioState.collecting)
async def save_scenario(message: types.Message, state: FSMContext):
    data = await state.get_data()
    steps = data.get("steps", [])
    if not steps:
        await message.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞.")
        return
    steps_text = "|||".join(steps)
    c.execute("INSERT INTO scenarios (creator_id, steps, created_at) VALUES (?, ?, ?)",
              (message.from_user.id, steps_text, datetime.datetime.now().isoformat()))
    conn.commit()
    scenario_id = c.lastrowid
    await message.answer(f"–°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø—É—Å–∫: /—Å—Ü–µ–Ω–∞—Ä–∏–π?id={scenario_id}")
    await state.finish()

@dp.message_handler(state=ScenarioState.collecting)
async def collect_step(message: types.Message, state: FSMContext):
    data = await state.get_data()
    steps = data.get("steps", [])
    steps.append(message.text)
    await state.update_data(steps=steps)
    await message.answer(f"–®–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {len(steps)}")
