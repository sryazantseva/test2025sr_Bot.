import os
import json
import openpyxl
import pytz
from datetime import datetime, timezone
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler

from broadcast_handler import init_broadcast, do_scheduled_broadcast, restore_scheduled_jobs
from scenario_handler import init_scenarios

BOT_TOKEN = os.environ.get("BOT_TOKEN")
# –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_IDS
ADMIN_IDS = [int(x) for x in os.environ.get("ADMIN_IDS", "").split(",") if x]

bot = __import__("telebot").TeleBot(BOT_TOKEN)
scheduler = BackgroundScheduler()
scheduler.start()

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
FILE_LIST = {
    "scenario_store.json": {},
    "user_db.json": [],
    "broadcasts.json": {},
    "scheduled_broadcasts.json": [],
    "temp_broadcasts.json": {},
    "temp_scenarios.json": {}
}
for filename, default_data in FILE_LIST.items():
    if not os.path.exists(filename):
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(default_data, f, ensure_ascii=False)

def update_user_activity(user):
    try:
        with open("user_db.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except Exception:
        users = []
    found = False
    for u in users:
        if u["id"] == user.id:
            u["last_active"] = datetime.now(timezone.utc).isoformat()
            found = True
            break
    if not found:
        new_user = {
            "id": user.id,
            "first_name": getattr(user, "first_name", ""),
            "username": getattr(user, "username", ""),
            "phone": "",
            "last_active": datetime.now(timezone.utc).isoformat()
        }
        users.append(new_user)
    with open("user_db.json", "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False)

def send_content(chat_id, text, file_id=None, link=None, file_type=None):
    final_text = text
    if link:
        final_text += f"\n\nüîó {link}"
    try:
        if file_id:
            if file_type == "photo":
                bot.send_photo(chat_id, file_id, caption=final_text)
            elif file_type == "video":
                bot.send_video(chat_id, file_id, caption=final_text)
            elif file_type == "audio":
                bot.send_audio(chat_id, file_id, caption=final_text)
            elif file_type == "animation":
                bot.send_animation(chat_id, file_id, caption=final_text)
            else:
                bot.send_document(chat_id, file_id, caption=final_text)
        else:
            bot.send_message(chat_id, final_text)
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

@bot.message_handler(commands=["start"])
def handle_start(message):
    update_user_activity(message.from_user)
    args = message.text.split()
    if len(args) > 1:
        scenario_code = args[1]
        try:
            with open("scenario_store.json", "r", encoding="utf-8") as f:
                scenarios = json.load(f)
        except:
            scenarios = {}
        scenario = scenarios.get(scenario_code)
        if scenario:
            send_content(
                chat_id=message.chat.id,
                text=scenario["text"],
                file_id=scenario.get("file_id"),
                link=scenario.get("link"),
                file_type=scenario.get("file_type")
            )
            return
        else:
            bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    bot.send_message(message.chat.id, (
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç!.\n\n"
        "/–∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Äì –≤—ã–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (Excel) —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –¥–∏–∞–ª–æ–≥.\n"
        "/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–±—â–µ–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π).\n"
        "/—Ä–∞—Å—Å—ã–ª–∫–∞ ‚Äì —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "/—Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äì —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è (–¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ /start <–∫–æ–¥>).\n"
        "/—Å–∫–∞—á–∞—Ç—å_—Å—Ü–µ–Ω–∞—Ä–∏–∏_excel ‚Äì —ç–∫—Å–ø–æ—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ Excel.\n"
        "/—Å–∫–∞—á–∞—Ç—å_—Ä–∞—Å—Å—ã–ª–∫–∏_excel ‚Äì —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ Excel.\n"
    ))

@bot.message_handler(commands=["–∫–æ–Ω—Ç–∞–∫—Ç—ã"])
def handle_contacts(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        with open("user_db.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except:
        users = []
    if not users:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Contacts"
    ws.append(["ID", "–ò–º—è", "Username", "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥"])
    for u in users:
        user_id = u["id"]
        username = u.get("username", "")
        if username:
            link = f"https://t.me/{username}"
        else:
            link = f"tg://user?id={user_id}"
        ws.append([user_id, u.get("first_name", ""), username, u.get("last_active", ""), link])
    wb.save("contacts.xlsx")
    with open("contacts.xlsx", "rb") as doc:
        bot.send_document(message.chat.id, doc, caption="üìã –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Excel)")

@bot.message_handler(commands=["–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
def handle_users(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        with open("user_db.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except:
        users = []
    total = len(users)
    active = 0
    now = datetime.now(timezone.utc)
    for u in users:
        if "last_active" in u:
            try:
                last = datetime.fromisoformat(u["last_active"])
                if (now - last).days < 7:
                    active += 1
            except:
                pass
    bot.send_message(message.chat.id, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö (–∑–∞ 7 –¥–Ω–µ–π): {active}")

@bot.message_handler(commands=["—Å–∫–∞—á–∞—Ç—å_—Å—Ü–µ–Ω–∞—Ä–∏–∏_excel"])
def download_scenarios_excel(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        with open("scenario_store.json", "r", encoding="utf-8") as f:
            scenarios = json.load(f)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        return
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–°—Ü–µ–Ω–∞—Ä–∏–∏"
    ws.append(["–ö–æ–¥", "–¢–µ–∫—Å—Ç", "–§–∞–π–ª ID", "–¢–∏–ø —Ñ–∞–π–ª–∞", "–°—Å—ã–ª–∫–∞"])
    for code, data in scenarios.items():
        ws.append([code, data.get("text", ""), data.get("file_id", ""), data.get("file_type", ""), data.get("link", "")])
    excel_file = "scenarios.xlsx"
    wb.save(excel_file)
    with open(excel_file, "rb") as doc:
        bot.send_document(message.chat.id, doc, caption="–°—Ü–µ–Ω–∞—Ä–∏–∏ (Excel)")

@bot.message_handler(commands=["—Å–∫–∞—á–∞—Ç—å_—Ä–∞—Å—Å—ã–ª–∫–∏_excel"])
def download_broadcasts_excel(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        with open("broadcasts.json", "r", encoding="utf-8") as f:
            broadcasts = json.load(f)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
        return
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–†–∞—Å—Å—ã–ª–∫–∏"
    ws.append(["ID", "–¢–µ–∫—Å—Ç", "–§–∞–π–ª ID", "–¢–∏–ø —Ñ–∞–π–ª–∞", "–°—Å—ã–ª–∫–∞", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"])
    for broadcast_id, data in broadcasts.items():
        ws.append([broadcast_id, data.get("text", ""), data.get("file_id", ""), data.get("media_type", ""), data.get("link", ""), data.get("delivered", 0)])
    excel_file = "broadcasts.xlsx"
    wb.save(excel_file)
    with open(excel_file, "rb") as doc:
        bot.send_document(message.chat.id, doc, caption="–†–∞—Å—Å—ã–ª–∫–∏ (Excel)")

@bot.message_handler(commands=["–∫–æ–º–∞–Ω–¥—ã"])
def admin_commands(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    commands_text = (
        "/–∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Äì –≤—ã–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (Excel) —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –¥–∏–∞–ª–æ–≥.\n"
        "/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–±—â–µ–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π).\n"
        "/—Ä–∞—Å—Å—ã–ª–∫–∞ ‚Äì —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "/—Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äì —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è (–¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ /start <–∫–æ–¥>).\n"
        "/—Å–∫–∞—á–∞—Ç—å_—Å—Ü–µ–Ω–∞—Ä–∏–∏_excel ‚Äì —ç–∫—Å–ø–æ—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ Excel.\n"
        "/—Å–∫–∞—á–∞—Ç—å_—Ä–∞—Å—Å—ã–ª–∫–∏_excel ‚Äì —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ Excel.\n"
    )
    bot.send_message(message.chat.id, commands_text)

def send_weekly_statistics():
    try:
        with open("user_db.json", "r", encoding="utf-8") as f:
            users = json.load(f)
    except:
        users = []
    total = len(users)
    now = datetime.now(timezone.utc)
    new_users = sum(1 for u in users if "last_active" in u and (now - datetime.fromisoformat(u["last_active"])).days < 7)
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
        f"–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users}\n"
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}"
    )
    bot.send_message(ADMIN_IDS[0], stats_text)  # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞

# –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 09:00 UTC)
scheduler.add_job(send_weekly_statistics, 'cron', day_of_week='mon', hour=9, minute=0)

restore_scheduled_jobs(scheduler, bot)
init_broadcast(bot, ADMIN_IDS, scheduler)
init_scenarios(bot, ADMIN_IDS)

bot.polling(none_stop=True)

